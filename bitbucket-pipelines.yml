image: node:18

definitions:
  services:
    docker:
      memory: 2048

pipelines:
  default:
    - step:
        name: Build and Test
        script:
          - yarn --version
          - yarn install
          - yarn build
          - echo "✅ Build successful!"

  branches:
    master:
      - step:
          name: Build and Deploy to Production
          deployment: production
          script:
            # Validate required environment variables for Vite build
            - echo "🔎 Checking required env vars..."
            - |
              req_vars=(VITE_REDDIT_CLIENT_ID VITE_REDDIT_REDIRECT_URI VITE_READ_API_BASE)
              missing=()
              for v in "${req_vars[@]}"; do
                if [ -z "${!v}" ]; then missing+=("$v"); fi
              done
              if [ ${#missing[@]} -gt 0 ]; then
                echo "❌ Missing required env vars: ${missing[*]}"
                echo "Add them in Bitbucket: Repository Settings → Pipelines → Repository variables"
                exit 1
              fi

            # Write .env.production for Vite (avoids relying on implicit env injection)
            - echo "📝 Creating .env.production for build..."
            - |
              cat > .env.production <<EOF
              VITE_REDDIT_CLIENT_ID=${VITE_REDDIT_CLIENT_ID}
              VITE_REDDIT_REDIRECT_URI=${VITE_REDDIT_REDIRECT_URI}
              VITE_READ_API_BASE=${VITE_READ_API_BASE}
              EOF

            # Check yarn version
            - yarn --version
            
            # Install dependencies
            - yarn install
            
            # Build the project with environment variables from Bitbucket
            - echo "🔨 Building project with environment variables..."
            - yarn build
            
            # Install SSH client and rsync for deployment
            - apt-get update && apt-get install -y openssh-client rsync
            
            # Configure SSH
            - mkdir -p ~/.ssh
            - echo "Host seojeek.com" >> ~/.ssh/config
            - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
            - echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
            - chmod 600 ~/.ssh/config
            
            # Deploy using rsync
            - echo "🚀 Starting deployment..."
            
            # Create backup on server before deploying
            - |
              ssh alxvallejo@seojeek.com << 'ENDSSH'
              set -e
              echo "📦 Preparing deployment on server..."
              
              # Check if directory exists, create if needed
              if [ ! -d "/var/www/reddzit-refresh" ]; then
                echo "⚠️  Directory /var/www/reddzit-refresh doesn't exist"
                echo "Please create it manually with:"
                echo "  sudo mkdir -p /var/www/reddzit-refresh"
                echo "  sudo chown alxvallejo:alxvallejo /var/www/reddzit-refresh"
                exit 1
              fi
              
              # Free-space guard (require >= 1GB free)
              echo "💾 Checking free space..."
              avail_kb=$(df -Pk / | awk 'NR==2{print $4}')
              if [ "$avail_kb" -lt 1048576 ]; then
                echo "❌ Low disk space on /: $(df -h / | awk 'NR==2{print $4" free"}')"
                echo "🧹 Attempting light cleanup (old backups, caches)..."
                rm -rf /var/www/reddzit-refresh/dist.backup.* 2>/dev/null || true
                yarn cache clean 2>/dev/null || true
                rm -rf ~/.cache/yarn/* ~/.npm/* 2>/dev/null || true
                avail_kb=$(df -Pk / | awk 'NR==2{print $4}')
                if [ "$avail_kb" -lt 1048576 ]; then
                  echo "❌ Still low disk space after cleanup. Aborting deploy."
                  exit 1
                fi
                echo "✅ Space after cleanup: $(df -h / | awk 'NR==2{print $4" free"}')"
              else
                echo "✅ Free space ok: $(df -h / | awk 'NR==2{print $4" free"}')"
              fi

              cd /var/www/reddzit-refresh
              
              # Backup current version (without sudo)
              if [ -d "dist" ] && [ -w "." ]; then
                echo "📸 Creating backup of current version..."
                cp -r dist dist.backup.$(date +%Y%m%d_%H%M%S) 2>/dev/null || echo "Could not create backup (permission issue)"
              fi
              
              echo "✅ Server prepared for deployment"
              ENDSSH
            
            # Transfer the built dist folder to the server
            - echo "📤 Transferring built files to server..."
            - rsync -rlvz --delete --no-perms --no-owner --no-group --no-times dist/ alxvallejo@seojeek.com:/var/www/reddzit-refresh/dist/
            
            # Set permissions and reload nginx
            - |
              ssh alxvallejo@seojeek.com << 'ENDSSH'
              set -e
              cd /var/www/reddzit-refresh
              
              # Try to set permissions (will skip if no sudo access)
              echo "🔒 Setting permissions..."
              if sudo -n true 2>/dev/null; then
                sudo chown -R www-data:www-data dist/
                echo "✅ Permissions set"
              else
                echo "⚠️  Cannot set permissions without sudo"
                echo "Run manually: sudo chown -R www-data:www-data /var/www/reddzit-refresh/dist/"
              fi
              
              # Try to reload nginx (will skip if no sudo access)
              echo "🌐 Reloading nginx..."
              if sudo -n true 2>/dev/null; then
                sudo systemctl reload nginx
                echo "✅ Nginx reloaded"
              else
                echo "⚠️  Cannot reload nginx without sudo"
                echo "Run manually: sudo systemctl reload nginx"
              fi
              
              # Validate deployment
              echo "✅ Validating deployment..."
              curl -s -o /dev/null -w "%{http_code}" https://reddzit.seojeek.com | grep -q "200" && echo "✅ Site is accessible!" || echo "⚠️ Site returned non-200 status"
              
              echo "🎉 Deployment complete!"
              ENDSSH
            
            # Post-deploy asset validation from CI: ensure JS/CSS exist and have correct MIME
            - echo "🔎 Validating deployed assets..."
            - |
              js_asset=$(sed -n 's/.*src="\\/assets\\/\(index-[^"]*\.js\)".*/\1/p' dist/index.html | head -n1)
              css_asset=$(sed -n 's/.*href="\\/assets\\/\(index-[^"]*\.css\)".*/\1/p' dist/index.html | head -n1)
              if [ -z "$js_asset" ] || [ -z "$css_asset" ]; then
                echo "❌ Could not parse asset names from dist/index.html"; exit 1; fi
              js_ct=$(curl -skI https://reddzit.seojeek.com/assets/$js_asset | awk -F': ' 'tolower($1)=="content-type"{print tolower($2)}' | tr -d '\r')
              css_ct=$(curl -skI https://reddzit.seojeek.com/assets/$css_asset | awk -F': ' 'tolower($1)=="content-type"{print tolower($2)}' | tr -d '\r')
              echo "JS content-type: $js_ct"; echo "CSS content-type: $css_ct"
              case "$js_ct" in application/javascript*|text/javascript*) : ;; *) echo "❌ JS asset has wrong MIME: $js_ct"; exit 1;; esac
              case "$css_ct" in text/css*) : ;; *) echo "❌ CSS asset has wrong MIME: $css_ct"; exit 1;; esac
              echo "✅ Asset validation passed"

            - echo "✅ Pipeline complete!"

    develop:
      - step:
          name: Build and Deploy to Staging
          deployment: staging
          script:
            - yarn --version
            - yarn install
            - yarn build
            - echo "✅ Build successful for staging!"
